#include <Encoder.h>

#define WHEEL_WIDTH 7 //inches between wheels
#define ONE_TURN 1600 // says how far its wheel is turning
#define INCH 156 // effectively how big the wheels are
#define RIGHT_MOTOR 0 //values chosen to allow for convienent encoder assignment
#define RIGHT 0
#define LEFT_MOTOR 1
#define LEFT 1

#define LEFT_DIR  3
#define LEFT_SPD  11 //must be pwm
#define RIGHT_DIR  4
#define RIGHT_SPD  10 //must be pwm

#define STRAIGHT_SPEED  160
#define STRAIGHT_ADJUST 6

#define LEFT_IR_SENS A1 //analog input sensors
#define RIGHT_IR_SENS A0

#define RIGHT_BLACK 550
#define LEFT_BLACK 550
#define LAPS 1 //number of laps to do, tracked by lengths

Encoder encLeft(20,21); //at leas one should be interrupt, best with both
Encoder encRight(18,19);

bool rightIR_isBlack;
bool leftIR_isBlack;

int lengths; //tracks how many times the bot has gone along the line. one time down is one length, 2 lengths = 1 lap

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(LEFT_DIR, OUTPUT);
  pinMode(RIGHT_DIR, OUTPUT);
  pinMode(LEFT_SPD, OUTPUT);
  pinMode(RIGHT_SPD, OUTPUT);
  delay(5000);
  Serial.println(encLeft.read());
  Serial.println(INCH);
  encLeft.write(0);

}



void loop() {
  // put your main code here, to run repeatedly:
  leftIR_isBlack = analogRead(LEFT_IR_SENS)>LEFT_BLACK;//read the voltages and see if black or white
  rightIR_isBlack = analogRead(RIGHT_IR_SENS)>RIGHT_BLACK; // true ==

  if(lengths<2*LAPS){ // checks to see if we have gone the full course. 2 lengths = 1 lap
    if(leftIR_isBlack) adjustLeft();
    if(rightIR_isBlack) adjustRight();
    
    if(leftIR_isBlack && rightIR_isBlack){
      lengths++;
      turn(0, 180, 250); // TURN AROUND
    }

    if(!leftIR_isBlack && !rightIR_isBlack){ // if not sense line straight
      motorOn(RIGHT, STRAIGHT_SPEED, 1);
      motorOn(LEFT, STRAIGHT_SPEED, 1);
    }
  }

  delay(5);
}

void leftMotorOn(int speed, bool dir){
  digitalWrite(LEFT_DIR, dir); //1  forward 0  backward
  analogWrite(LEFT_SPD, speed);
}

void rightMotorOn(int speed, bool dir){
  digitalWrite(RIGHT_DIR, dir); //1  forward 0  backward
  analogWrite(RIGHT_SPD, speed);
}

void driveStraight(float distance, int speed){
  bool dir=true;
  if(distance<0) {
    dir = !dir;
    distance = -distance;
  }
  encLeft.write(0);
  int rightSpeed = speed;
  leftMotorOn(speed, dir);
  rightMotorOn(speed, dir);
  int traveled = 0;
  while(abs(traveled)<distance*INCH){
    traveled = encLeft.read();
    rightSpeed = speed+(abs(encLeft.read())-abs(encRight.read()));//compares
    //Serial.println(rightSpeed);
    rightMotorOn(rightSpeed, dir);
  }
  leftMotorOn(250, !dir);
  rightMotorOn(250, !dir);
  delay(20);
  leftMotorOn(0, !dir);
  rightMotorOn(0, !dir);
}

void motorOn(int motor, int speed, bool dir){
  if (speed < 0) dir = !dir;
  if (speed < 0) speed = -speed;
  if (speed > 255) speed = 255;
  if (motor == LEFT_MOTOR) leftMotorOn(speed, dir);
  else rightMotorOn(speed, dir);
}

void adjustRight(){
  motorOn(RIGHT, -STRAIGHT_SPEED*.25, 1); //reverse right at lower speed
  motorOn(LEFT, STRAIGHT_SPEED+50, 1); //speed up left wheel
}

void adjustLeft(){
  motorOn(LEFT, -STRAIGHT_SPEED*.25, 1); //reverse left wheel at lower speed
  motorOn(RIGHT, STRAIGHT_SPEED+50, 1); //speed up right wheel
}

void turn(double radius, double deg, int speed){
  //assigns a variable to track the inside and outside wheel based on direction of turn
  int wheelIn;//0
  int wheelOut;
  if (deg > 0){ 
    wheelIn = LEFT_MOTOR;
    wheelOut= RIGHT_MOTOR;
  }else{
    wheelIn = RIGHT_MOTOR;
    wheelOut = LEFT_MOTOR;
  }
  double ratIO = (2*radius-WHEEL_WIDTH)/(2*radius+WHEEL_WIDTH); //math go brrrr
  int outerArcL = (PI*(2*radius+WHEEL_WIDTH)*deg*INCH)/360;
  int innerSpeed = speed*ratIO;
  // Serial.println(ratIO);
  // Serial.print("outer speed:");
  // Serial.println(speed);
  // Serial.print("inner speed:");
  // Serial.println(speed*ratIO);


  motorOn(wheelOut, speed, 1);
  motorOn(wheelIn, speed*ratIO, 1);
  
  Serial.println("before loop");
  int encoderValues[] = {0, 0}; //i like arrays
  encRight.write(0);
  encLeft.write(0);
  while(encoderValues[wheelOut]<abs(outerArcL)){
    encoderValues[RIGHT] = encRight.read(); 
    encoderValues[LEFT] = encLeft.read();

    motorOn(wheelIn, innerSpeed + (encoderValues[wheelOut]*ratIO-encoderValues[wheelIn]), 1); //feedback correction
  }

  motorOn(wheelOut, speed, 0);
  motorOn(wheelIn, speed*ratIO, 0);
  delay(20);
  motorOn(wheelOut, 0, 1);
  motorOn(wheelIn, 0, 1);

}
